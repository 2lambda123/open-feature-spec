[
    {
        "id": "Requirement 1.1",
        "clean id": "requirement_1_1",
        "content": "Hook context MUST provide: the flag key, flag type, evaluation context, and the default value.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 1.2",
        "clean id": "requirement_1_2",
        "content": "Hook context SHOULD provide: provider (instance) and client (instance)",
        "RFC 2119 keyword": "SHOULD",
        "children": []
    },
    {
        "id": "Requirement 1.3",
        "clean id": "requirement_1_3",
        "content": "flag key, flag type, default value properties MUST be immutable. If the language does not support immutability, the hook MUST NOT modify these properties.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 1.4",
        "clean id": "requirement_1_4",
        "content": "The evaluation context MUST be mutable only within the `before` hook.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 2.1",
        "clean id": "requirement_2_1",
        "content": "HookHints MUST be a map of objects.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Condition 2.2",
        "clean id": "condition_2_2",
        "content": "The implementation language supports a mechanism for marking data as immutable.>",
        "RFC 2119 keyword": null,
        "children": []
    },
    {
        "id": "Requirement 3.1",
        "clean id": "requirement_3_1",
        "content": "Hooks MUST specify at least one stage.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 3.2",
        "clean id": "requirement_3_2",
        "content": "The `before` stage MUST run before flag evaluation occurs. It accepts a `hook context` (required) and `HookHints` (optional) as parameters and returns either a `HookContext` or nothing.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 3.3",
        "clean id": "requirement_3_3",
        "content": "The `after` stage MUST run after flag evaluation occurs. It accepts a `hook context` (required), `flag evaluation details` (required) and `HookHints` (optional). It has no return value.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 3.4",
        "clean id": "requirement_3_4",
        "content": "The `error` hook MUST run when errors are encountered in the `before` stage, the `after` stage or during flag evaluation. It accepts `hook context` (required), `exception` for what went wrong (required), and `HookHints` (optional). It has no return value.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 3.5",
        "clean id": "requirement_3_5",
        "content": "The `finally` hook MUST run after the `before`, `after`, and `error` stages. It accepts a `hook context` (required) and `HookHints` (optional). There is no return value.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Condition 3.6",
        "clean id": "condition_3_6",
        "content": "`finally` is a reserved word in the language.>",
        "RFC 2119 keyword": null,
        "children": []
    },
    {
        "id": "Requirement 4.1",
        "clean id": "requirement_4_1",
        "content": "The API, Client and invocation MUST have a method for registering hooks which accepts `flag evaluation options`",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 4.2",
        "clean id": "requirement_4_2",
        "content": "Hooks MUST be evaluated in the following order:- before: API, Client, Invocation- after: Invocation, Client, API- error (if applicable): Invocation, Client, API- finally: Invocation, Client, APIIf an error occurs in the `finally` hook, it MUST NOT trigger the `error` hook.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 4.3",
        "clean id": "requirement_4_3",
        "content": "If an error occurs in the `before` or `after` hooks, the `error` hooks MUST be invoked.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 4.4",
        "clean id": "requirement_4_4",
        "content": "If an error occurs during the evaluation of `before` or `after` hooks, any remaining hooks in the `before` or `after` stages MUST NOT be invoked.",
        "RFC 2119 keyword": "MUST NOT",
        "children": []
    },
    {
        "id": "Requirement 4.5",
        "clean id": "requirement_4_5",
        "content": "If an error is encountered in the error stage, it MUST NOT be returned to the user.",
        "RFC 2119 keyword": "MUST NOT",
        "children": []
    },
    {
        "id": "Requirement 5.1",
        "clean id": "requirement_5_1",
        "content": "`Flag evalution options` MUST contain a list of hooks to evaluate.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 5.2",
        "clean id": "requirement_5_2",
        "content": "`Flag evaluation options` MAY contain `HookHints`, a map of data to be provided to hook invocations.",
        "RFC 2119 keyword": "MAY",
        "children": []
    },
    {
        "id": "Requirement 5.3",
        "clean id": "requirement_5_3",
        "content": "`HookHints` MUST be passed to each hook.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "Requirement 5.4",
        "clean id": "requirement_5_4",
        "content": "The hook MUST NOT alter the `HookHints` object.",
        "RFC 2119 keyword": "MUST NOT",
        "children": []
    }
]